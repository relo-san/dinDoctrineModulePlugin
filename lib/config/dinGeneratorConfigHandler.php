<?php

/*
 * This file is part of the dinDoctrineModulePlugin package.
 * (c) DineCat, 2010 http://dinecat.com/
 * 
 * For the full copyright and license information, please view the LICENSE file,
 * that was distributed with this package, or see http://www.dinecat.com/din/license.html
 */

/**
 * Handler for generator module config's
 * 
 * @package     dinDoctrineModulePlugin
 * @subpackage  lib.config
 * @author      Nicolay N. Zyk <relo.san@gmail.com>
 */
class dinGeneratorConfigHandler extends sfYamlConfigHandler
{

    /**
     * Execute handler
     * 
     * @param   array   $configFiles    Configuration files
     * @return  string  Php code for configuration file
     */
    public function execute( $configFiles )
    {

        if ( !$config = self::parseYamls( $configFiles ) )
        {
            return '';
        }

        if ( !isset( $config['generator'] ) )
        {
            throw new sfParseException( sprintf(
                'Configuration file "%s" must specify a generator section.',
                isset( $configFiles[1] ) ? $configFiles[1] : $configFiles[0]
            ) );
        }

        $config = sfToolkit::arrayDeepMerge( $this->getBaseConfig(), $config );

        $config = $this->configureI18nFields( $this->configureSort( $config['generator'] ) );

        if ( !isset( $config['class'] ) )
        {
            throw new sfParseException( sprintf(
                'Configuration file "%s" must specify a generator class section under the generator section.',
                isset( $configFiles[1] ) ? $configFiles[1] : $configFiles[0]
            ) );
        }

        foreach ( array( 'fields', 'list', 'edit' ) as $section )
        {
            if ( isset( $config[$section] ) )
            {
                throw new sfParseException( sprintf(
                    'Configuration file "%s" can specify a "%s" section but only under the param section.',
                    isset( $configFiles[1] ) ? $configFiles[1] : $configFiles[0], $section
                ) );
            }
        }

        $generatorManager = new sfGeneratorManager( sfContext::getInstance()->getConfiguration() );

        $generatorParam = isset( $config['param'] ) ? $config['param'] : array();

        preg_match( '#.*/modules/([^/]+)/#', str_replace( '\\', '/', $configFiles[0] ), $match );
        $generatorParam['moduleName'] = $match[1];

        return sprintf(
            "<?php\n// auto-generated by dinGeneratorConfigHandler\n// date: %s\n%s\n",
            date( 'Y/m/d H:i:s' ), $generatorManager->generate( $config['class'], $generatorParam )
        );

    } // dinGeneratorConfigHandler::execute()


    /**
     * Get base generator config (defaults)
     * 
     * @return  array   Base generator config
     */
    protected function getBaseConfig()
    {

        $out = array();
        $file = sfConfig::get( 'sf_app_config_dir' ) . '/generators.yml';
        if ( is_readable( $file ) )
        {
            $out = self::parseYaml( $file );
            if ( isset( $out['module'] ) )
            {
                $out = $out['module'];
            }
        }
        return (array) $out;

    } // dinGeneratorConfigHandler::getBaseConfig()


    /**
     * Configure sort (set default)
     * 
     * @param   array   $config Module config
     * @return  array   Module config
     */
    protected function configureSort( $config )
    {

        if ( !isset( $config['param']['config']['list']['sort'] ) )
        {
            $config['param']['config']['list']['sort'] = array();
        }
        return $config;

    } // dinGeneratorConfigHandler::configureSort()


    /**
     * Configure i18n form fields
     * 
     * @param   array   $config Module config
     * @return  array   Module config
     */
    protected function configureI18nFields( $config )
    {

        $table = Doctrine::getTable( $config['param']['model_class'] );
        if ( !$table->isI18n() )
        {
            foreach( array( 'form', 'edit', 'new' ) as $action )
            {
                if ( isset( $config['param']['config'][$action]['display'] ) )
                {
                    $sets = $config['param']['config'][$action]['display'];
                    if ( isset( $sets['translated'] ) )
                    {
                        $sets['fieldsets.def'] = $sets['translated'];
                        unset( $sets['translated'] );
                    }
                    $config['param']['config'][$action]['display'] = $sets;
                }
            }
            return $config;
        }

        $i18n = $table->getI18nTable();

        foreach( array( 'form', 'edit', 'new' ) as $action )
        {
            if ( isset( $config['param']['config'][$action]['display'] ) )
            {
                $sets = $config['param']['config'][$action]['display'];
                if ( !$sets )
                {
                    continue;
                }
                foreach ( $sets as $name => $columns )
                {
                    if ( $name == 'translated' )
                    {
                        continue;
                    }
                    if ( !$columns )
                    {
                        unset( $sets[$name] );
                        continue;
                    }
                    foreach ( $columns as $k => $column )
                    {
                        if ( $table->hasColumn( $column ) )
                        {
                            continue;
                        }
                        else if ( $i18n->hasColumn( $column ) )
                        {
                            $sets['translated'][] = $column;
                            unset( $sets[$name][$k] );
                        }
                    }
                }
                //TODO: add configurable translations
                if ( isset( $sets['translated'] ) )
                {
                    foreach ( sfConfig::get( 'sf_active_languages', array( 'en' ) ) as $lang )
                    {
                        $sets['fieldsets.' . $lang] = array( $lang );
                    }
                    unset( $sets['translated'] );
                }
                $config['param']['config'][$action]['display'] = $sets;
            }
        }
        return $config;

    } // dinGeneratorConfigHandler::configureI18nFields()

} // dinGeneratorConfigHandler

//EOF